#include ../data/case14.txt
#include ../lib/idx_gen.txt
#include ../lib/idx_bus.txt
#include ../lib/idx_brch.txt
#include ../lib/make_y_bus.txt
#include ../lib/make_y_bus_Yf.txt
#include ../lib/make_y_bus_Yt.txt
#include ../lib/dsbus_dv.txt
#include ../lib/make_sdzip.txt
#include ../lib/make_sbus.txt
#include ../lib/newtonpf.txt
#include ../lib/runpf.txt
#include ../lib/pfsoln.txt
#include ../lib/total_load.txt


info(`Running power flow on case14...`);
for i in 0..5 {
    r = runpf();
}
info(`Run power flow on case14 end`);

Ybus = make_y_bus(baseMVA, bus, branch);
Yf = make_y_bus_Yf(baseMVA, bus, branch);
Yt = make_y_bus_Yt(baseMVA, bus, branch);
V = r;
bus_type = slice(bus, [0], [BUS_TYPE-1,BUS_TYPE]);
ref = find(bus_type == REF) + 1;
pv  = find(bus_type == PV) + 1;
pq  = find(bus_type == PQ) + 1;
bus_output = pfsoln(baseMVA, bus, gen, branch, Ybus, Yf, Yt, V, ref, pv, pq, []);
gen_output = pfsoln(baseMVA, bus, gen, branch, Ybus, Yf, Yt, V, ref, pv, pq, []);
branch_output = pfsoln(baseMVA, bus, gen, branch, Ybus, Yf, Yt, V, ref, pv, pq, []);

//bus结果
assert_relative_eq(bus_output, [
    [c(1,0), c(3,0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0600,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(2,0), c(2,0), c(21.7,0.0), c(12.7,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0450,0.0), c(-4.9826,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(3,0), c(2,0), c(94.2,0.0), c(19.0,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0100,0.0), c(-12.7251,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(4,0), c(1,0), c(47.8,0.0), c(-3.9,-0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0177,0.0), c(-10.3129,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(5,0), c(1,0), c(7.6,0.0), c(1.6,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0195,0.0), c(-8.7739,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(6,0), c(2,0), c(11.2,0.0), c(7.5,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0700,0.0), c(-14.2209,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(7,0), c(1,0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0615,0.0), c(-13.3596,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(8,0), c(2,0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0900,0.0), c(-13.3596,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(9,0), c(1,0), c(29.5,0.0), c(16.6,0.0), c(0.0,0.0), c(19.0,0.0), c(1.0,0.0), c(1.0559,0.0), c(-14.9385,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(10,0), c(1,0), c(9.0,0.0), c(5.8,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0510,0.0), c(-15.0973,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(11,0), c(1,0), c(3.5,0.0), c(1.8,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0569,0.0), c(-14.7906,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(12,0), c(1,0), c(6.1,0.0), c(1.6,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0552,0.0), c(-15.0756,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(13,0), c(1,0), c(13.5,0.0), c(5.8,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0504,0.0), c(-15.1563,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)],
    [c(14,0), c(1,0), c(14.9,0.0), c(5.0,0.0), c(0.0,0.0), c(0.0,0.0), c(1.0,0.0), c(1.0355,0.0), c(-16.0336,0.0), c(0.0,0.0), c(1.0,0.0), c(1.06,0.0), c(0.94,0.0)]
],4);

//gen结果
/*assert_relative_eq(gen_output, [
    [c(1.0,0.0), c(232.3933,0.0), c(-16.5493,0.0), c(10.0,0.0), c(0.0,0.0), c(1.0600,0.0), c(100.0,0.0), c(1.0,0.0), c(332.4,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0)],
    [c(2.0,0.0), c(40.0,0.0), c(43.5571,0.0), c(50.0,0.0), c(-40.0,-0.0), c(1.0450,0.0), c(100.0,0.0), c(1.0,0.0), c(140.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0)],
    [c(3.0,0.0), c(0.0,0.0), c(25.0753,0.0), c(40.0,0.0), c(0.0,0.0), c(1.0100,0.0), c(100.0,0.0), c(1.0,0.0), c(100.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0)],
    [c(6.0,0.0), c(0.0,0.0), c(12.7309,0.0), c(24.0,0.0), c(-6.0,-0.0), c(1.0700,0.0), c(100.0,0.0), c(1.0,0.0), c(100.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0)],
    [c(8.0,0.0), c(0.0,0.0), c(17.6235,0.0), c(24.0,0.0), c(-6.0,-0.0), c(1.0900,0.0), c(100.0,0.0), c(1.0,0.0), c(100.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0), c(0.0,0.0)]
 ],4);*/

//branch结果
/*assert_relative_eq(branch_output, [
    [c(1.0, 0.0), c(2.0, 0.0), c(0.0194, 0.0), c(0.0592, 0.0), c(0.0528, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(156.8829, 0.0), c(-20.4043, 0.0), c(-152.5853, 0.0), c(27.6762, 0.0)],
    [c(1.0, 0.0), c(5.0, 0.0), c(0.0540, 0.0), c(0.2230, 0.0), c(0.0492, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(75.5104, 0.0), c(3.8550, 0.0), c(-72.7475, 0.0), c(2.2294, 0.0)],
    [c(2.0, 0.0), c(3.0, 0.0), c(0.0470, 0.0), c(0.1980, 0.0), c(0.0438, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(73.2376, 0.0), c(3.5602, 0.0), c(-70.9143, 0.0), c(1.6022, 0.0)],
    [c(2.0, 0.0), c(4.0, 0.0), c(0.0581, 0.0), c(0.1763, 0.0), c(0.0340, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(56.1315, 0.0), c(-1.5504, 0.0), c(-54.4548, 0.0), c(3.0207, 0.0)],
    [c(2.0, 0.0), c(5.0, 0.0), c(0.0570, 0.0), c(0.1739, 0.0), c(0.0346, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(41.5162, 0.0), c(1.1710, 0.0), c(-40.6125, 0.0), c(-2.09903, 0.0)],
    [c(3.0, 0.0), c(4.0, 0.0), c(0.0670, 0.0), c(0.1710, 0.0), c(0.0128, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(-23.2857, 0.0), c(4.4731, 0.0), c(23.6591, 0.0), c(-4.8357, 0.0)],
    [c(4.0, 0.0), c(5.0, 0.0), c(0.0134, 0.0), c(0.0421, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(-61.1582, 0.0), c(15.8236, 0.0), c(61.6727, 0.0), c(-14.2010, 0.0)],
    [c(4.0, 0.0), c(7.0, 0.0), c(0.0000, 0.0), c(0.2091, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.9780, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(28.0742, 0.0), c(-9.6811, 0.0), c(-28.0742, 0.0), c(11.3843, 0.0)],
    [c(4.0, 0.0), c(9.0, 0.0), c(0.0000, 0.0), c(0.5562, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.9690, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(16.0798, 0.0), c(-0.4276, 0.0), c(-16.0798, 0.0), c(1.7323, 0.0)],
    [c(5.0, 0.0), c(6.0, 0.0), c(0.0000, 0.0), c(0.2520, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.9320, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(44.0873, 0.0), c(12.4707, 0.0), c(-44.0873, 0.0), c(-8.04955, 0.0)],
    [c(6.0, 0.0), c(11.0, 0.0), c(0.0950, 0.0), c(0.1989, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(7.3533, 0.0), c(3.5605, 0.0), c(-7.2979, 0.0), c(-3.4445, 0.0)],
    [c(6.0, 0.0), c(12.0, 0.0), c(0.1229, 0.0), c(0.2558, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(7.7861, 0.0), c(2.5034, 0.0), c(-7.7143, 0.0), c(-2.3540, 0.0)],
    [c(6.0, 0.0), c(13.0, 0.0), c(0.0662, 0.0), c(0.1303, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(17.7480, 0.0), c(7.2166, 0.0), c(-17.5359, 0.0), c(-6.79892, 0.0)],
    [c(7.0, 0.0), c(8.0, 0.0), c(0.0000, 0.0), c(0.1762, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(-5.7036e-11, 0.0), c(-17.1630, 0.0), c(5.7036e-11, 0.0), c(17.6235, 0.0)],
    [c(7.0, 0.0), c(9.0, 0.0), c(0.0000, 0.0), c(0.1100, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(28.0742, 0.0), c(5.7787, 0.0), c(-28.0742, 0.0), c(-4.9766, 0.0)],
    [c(9.0, 0.0), c(10.0, 0.0), c(0.0318, 0.0), c(0.0845, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(5.2276, 0.0), c(4.2191, 0.0), c(-5.2147, 0.0), c(-4.1849, 0.0)],
    [c(9.0, 0.0), c(14.0, 0.0), c(0.1271, 0.0), c(0.2704, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(9.4264, 0.0), c(3.6100, 0.0), c(-9.3102, 0.0), c(-3.3629, 0.0)],
    [c(10.0, 0.0), c(11.0, 0.0), c(0.0821, 0.0), c(0.1921, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(-3.7853, 0.0), c(-1.6151, 0.0), c(3.7979, 0.0), c(1.6445, 0.0)],
    [c(12.0, 0.0), c(13.0, 0.0), c(0.2209, 0.0), c(0.1999, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(1.6143, 0.0), c(0.7540, 0.0), c(-1.6080, 0.0), c(-0.7483, 0.0)],
    [c(13.0, 0.0), c(14.0, 0.0), c(0.1709, 0.0), c(0.3480, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(0.0, 0.0), c(1.0, 0.0), c(-360.0, -0.0), c(360.0, 0.0), c(5.6439, 0.0), c(1.7472, 0.0), c(-5.5898, 0.0), c(-1.6371, 0.0)]
],4);*/


//return bus_output;
//return gen_output;
//return branch_output;